name: CI Pipeline

# Concurrency control - cancel previous runs when new commits are pushed
# This saves CI minutes by ensuring only the latest commit is tested
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  # Manual trigger - allows running the pipeline on-demand
  workflow_dispatch:
    inputs:
      environment:
        description: 'Runner environment preference'
        required: false
        default: 'self-hosted'
        type: choice
        options:
        - self-hosted
        - ubuntu-latest
        - macos-latest
        - windows-latest
      
  # Automatic triggers with path filtering
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'           # Skip markdown files
      - 'docs/**'         # Skip documentation
      - '.gitignore'      # Skip git files
      - 'LICENSE'         # Skip license
      - '.vscode/**'      # Skip VS Code settings
      - '.scripts/README.md'  # Skip script docs
      
  # Optional: Still allow push to main for releases
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - '.vscode/**'
      - '.scripts/README.md'

env:
  PLATFORMIO_CORE_DIR: ~/.platformio

jobs:
  check_runners:
    name: Check self-hosted runners
    runs-on: ubuntu-latest
    outputs:
      linux: ${{ steps.check.outputs.linux }}
      macos: ${{ steps.check.outputs.macos }}
      windows: ${{ steps.check.outputs.windows }}
    steps:
    - id: check
      name: Query repository self-hosted runners
      env:
        GITHUB_TOKEN: ${{ secrets.ORG_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
        OWNER: ${{ github.repository_owner }}
      run: |
        echo "Fetching self-hosted runners for org ${OWNER}..."
        curl -s -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/orgs/${OWNER}/actions/runners" -o runners.json
        python3 - <<'PY'
        import json, os
        data = json.load(open('runners.json'))
        avail = {'linux':'false', 'macos':'false', 'windows':'false'}
        for r in data.get('runners', []):
            if r.get('status') != 'online':
                continue
            labels = [l.get('name','').lower() for l in r.get('labels', [])]
            if 'linux' in labels:
                avail['linux'] = 'true'
            if 'macos' in labels or 'mac os' in labels or 'macos-latest' in labels:
                avail['macos'] = 'true'
            if 'windows' in labels:
                avail['windows'] = 'true'
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            print(f"linux={avail['linux']}", file=f)
            print(f"macos={avail['macos']}", file=f)
            print(f"windows={avail['windows']}", file=f)
        PY

  availability-alert:
    name: Runner availability alert
    runs-on: ubuntu-latest
    needs: check_runners
    if: needs.check_runners.outputs.linux == 'false' || needs.check_runners.outputs.macos == 'false' || needs.check_runners.outputs.windows == 'false'
    steps:
    - name: Report offline runners
      run: |
        echo "Self-hosted runner availability:"
        echo "  linux: ${{ needs.check_runners.outputs.linux }}"
        echo "  macos: ${{ needs.check_runners.outputs.macos }}"
        echo "  windows: ${{ needs.check_runners.outputs.windows }}"
    - name: Create or update GitHub issue for offline runners
      env:
        GITHUB_TOKEN: ${{ secrets.ORG_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        TITLE="Self-hosted runner(s) offline"
        BODY=$(printf 'Self-hosted runners were unavailable when this workflow ran.\n\nlinux: %s\nmacos: %s\nwindows: %s\n\nRun: %s' "${{ needs.check_runners.outputs.linux }}" "${{ needs.check_runners.outputs.macos }}" "${{ needs.check_runners.outputs.windows }}" "${{ github.run_html_url }}")

        # Search for existing open issues with the same title
        issues=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues?state=open&labels=runner-offline")
        existing_number=$(echo "$issues" | python3 -c "import sys,json; data=json.load(sys.stdin); print(next((i['number'] for i in data if i.get('title','')=='${TITLE}'),''))")

        if [ -n "$existing_number" ]; then
          echo "Found existing issue #$existing_number — adding a comment"
          comment=$(printf '{"body":"%s"}' "$BODY")
          curl -s -X POST -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/$existing_number/comments" -d "$comment" || true
        else
          echo "No existing issue found — creating a new one"
          json=$(printf '{"title":"%s","body":"%s","labels":["runner-offline"]}' "$TITLE" "$BODY")
          curl -s -X POST -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues" -d "$json" || true
        fi
    - name: Post alert to Discord (optional)
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        LINUX_AVAIL: ${{ needs.check_runners.outputs.linux }}
        MACOS_AVAIL: ${{ needs.check_runners.outputs.macos }}
        WINDOWS_AVAIL: ${{ needs.check_runners.outputs.windows }}
        RUN_URL: ${{ github.run_html_url }}
      run: |
        if [ -z "$DISCORD_WEBHOOK" ]; then
          echo "DISCORD_WEBHOOK not set; skipping Discord notification"
          exit 0
        fi
        payload=$(printf '{"content":"Self-hosted runners were unavailable when this workflow ran.\nlinux: %s\nmacos: %s\nwindows: %s\nRun: %s"}' "$LINUX_AVAIL" "$MACOS_AVAIL" "$WINDOWS_AVAIL" "$RUN_URL")
        curl -s -H "Content-Type: application/json" -d "$payload" "$DISCORD_WEBHOOK" || true
  test:
    name: Native Tests
    needs: check_runners
    # Run tests on all self-hosted OSes (linux, macos, windows).
    strategy:
      matrix:
        osLabel: [linux, macos, windows]
    # Skip this matrix entry if the self-hosted runner for the OS is offline
    if: ${{ (matrix.osLabel == 'linux' && needs.check_runners.outputs.linux == 'true') || (matrix.osLabel == 'macos' && needs.check_runners.outputs.macos == 'true') || (matrix.osLabel == 'windows' && needs.check_runners.outputs.windows == 'true') }}
    runs-on:
      - self-hosted
      - ${{ matrix.osLabel }}
    timeout-minutes: 10  # Reasonable timeout for unit tests
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Runner info
      run: |
        echo "RUNNER_NAME=$RUNNER_NAME"
        echo "RUNNER_OS=$RUNNER_OS"
        echo "RUNNER_LABELS=$RUNNER_LABELS"
        uname -a || echo "uname not available on this runner"

    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: |
          ~/.platformio
          ~/.cache/pip
        key: ${{ runner.os }}-platformio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-platformio-
          
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
        
    - name: Install PlatformIO dependencies
      run: |
        pio platform install espressif32
        
    - name: Run Native Tests
      run: |
        echo "Running native environment tests..."
        pio test -e native --verbose
        
    - name: Test Results Summary
      if: always()
      run: |
        if [ $? -eq 0 ]; then
          echo "✅ All native tests passed!"
        else
          echo "❌ Some native tests failed!"
          exit 1
        fi

    - name: Cleanup workspace (self-hosted)
      if: always()
      run: |
        # Only attempt cleanup on self-hosted runners
        if echo "$RUNNER_LABELS" | grep -qi 'self-hosted'; then
          echo "Cleaning workspace and caches on self-hosted runner"
          rm -rf .pio .pytest_cache .cache .platformio ~/.platformio || true
        else
          echo "Not a self-hosted runner; skipping cleanup"
        fi
        
  build:
    name: ESP32 Build
    needs: check_runners
    # Build on all self-hosted OSes (linux, macos, windows).
    strategy:
      matrix:
        osLabel: [linux, macos, windows]
    # Skip this matrix entry if the self-hosted runner for the OS is offline
    if: ${{ (matrix.osLabel == 'linux' && needs.check_runners.outputs.linux == 'true') || (matrix.osLabel == 'macos' && needs.check_runners.outputs.macos == 'true') || (matrix.osLabel == 'windows' && needs.check_runners.outputs.windows == 'true') }}
    runs-on:
      - self-hosted
      - ${{ matrix.osLabel }}
    timeout-minutes: 15  # Reasonable timeout for ESP32 compilation
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Runner info
      run: |
        echo "RUNNER_NAME=$RUNNER_NAME"
        echo "RUNNER_OS=$RUNNER_OS"
        echo "RUNNER_LABELS=$RUNNER_LABELS"
        uname -a || echo "uname not available on this runner"

    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: |
          ~/.platformio
          ~/.cache/pip
        key: ${{ runner.os }}-platformio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-platformio-
          
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
        
    - name: Install ESP32 platform
      run: |
        pio platform install espressif32
        
    - name: Build ESP32 Firmware
      run: |
        echo "Building ESP32 firmware..."
        pio run -e esp32dev --verbose
        
    - name: Verify build artifacts
      run: |
        ls -la .pio/build/esp32dev/
        if [ -f ".pio/build/esp32dev/firmware.bin" ]; then
          echo "✅ Firmware binary created successfully"
          echo "📦 Firmware size: $(stat -c%s .pio/build/esp32dev/firmware.bin 2>/dev/null || stat -f%z .pio/build/esp32dev/firmware.bin) bytes"
        else
          echo "❌ Firmware binary not found!"
          exit 1
        fi
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: esp32-firmware-${{ runner.os }}
        path: |
          .pio/build/esp32dev/firmware.bin
          .pio/build/esp32dev/firmware.elf
          .pio/build/esp32dev/partitions.bin
          .pio/build/esp32dev/bootloader.bin
        retention-days: 7

    - name: Cleanup workspace (self-hosted)
      if: always()
      run: |
        # Only attempt cleanup on self-hosted runners
        if echo "$RUNNER_LABELS" | grep -qi 'self-hosted'; then
          echo "Cleaning workspace and caches on self-hosted runner"
          rm -rf .pio .pytest_cache .cache .platformio build .pioenvs || true
        else
          echo "Not a self-hosted runner; skipping cleanup"
        fi
        
  # Fallback job - runs if primary jobs fail due to runner issues
  fallback:
    name: Fallback Validation
    needs: [test, build, check_runners]
    # Run fallback on all self-hosted OSes as well
    strategy:
      matrix:
        osLabel: [linux, macos, windows]
      fail-fast: false
    # Only run fallback when workflow_dispatch failure condition holds AND the OS runner is available
    if: ${{ (failure() && github.event_name == 'workflow_dispatch') && ((matrix.osLabel == 'linux' && needs.check_runners.outputs.linux == 'true') || (matrix.osLabel == 'macos' && needs.check_runners.outputs.macos == 'true') || (matrix.osLabel == 'windows' && needs.check_runners.outputs.windows == 'true')) }}
    runs-on:
      - self-hosted
      - ${{ matrix.osLabel }}
    timeout-minutes: 20
    
    steps:
    - name: Runner info
      run: |
        echo "RUNNER_NAME=$RUNNER_NAME"
        echo "RUNNER_OS=$RUNNER_OS"
        echo "RUNNER_LABELS=$RUNNER_LABELS"
        uname -a || echo "uname not available on this runner"

    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
        
    - name: Quick Validation
      run: |
        echo "Running fallback validation on ${{ matrix.osLabel }}..."
        pio platform install espressif32
        pio test -e native --verbose
        pio run -e esp32dev
        
  validate:
    name: Validation Summary
    # Run validation summary on all OSes to validate environment-specific results.
    strategy:
      matrix:
        osLabel: [linux, macos, windows]
    # Only run validate for OSes where the self-hosted runner was available
    if: ${{ (matrix.osLabel == 'linux' && needs.check_runners.outputs.linux == 'true') || (matrix.osLabel == 'macos' && needs.check_runners.outputs.macos == 'true') || (matrix.osLabel == 'windows' && needs.check_runners.outputs.windows == 'true') }}
    runs-on:
      - self-hosted
      - ${{ matrix.osLabel }}
    needs: [check_runners, test, build]
    timeout-minutes: 2
    
    steps:
    - name: Runner info
      run: |
        echo "RUNNER_NAME=$RUNNER_NAME"
        echo "RUNNER_OS=$RUNNER_OS"
        echo "RUNNER_LABELS=$RUNNER_LABELS"
        uname -a || echo "uname not available on this runner"

    - name: Check Results
      run: |
        echo "=== CI Pipeline Results ==="
        echo "Native Tests: ${{ needs.test.result }}"
        echo "ESP32 Build: ${{ needs.build.result }}"
        echo "Runner: ${{ github.event.inputs.environment || 'self-hosted' }} on ${{ matrix.osLabel }}"
        echo "Trigger: ${{ github.event_name }}"
        echo ""
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "🎉 All validations passed!"
          echo "✅ Native tests: PASSED"
          echo "✅ ESP32 build: PASSED"
          echo ""
          echo "Ready for deployment! 🚀"
          exit 0
        else
          echo "💥 Pipeline failed!"
          echo "❌ Native tests: ${{ needs.test.result }}"
          echo "❌ ESP32 build: ${{ needs.build.result }}"
          echo ""
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "💡 Manual run detected - consider trying a different runner if this was a timeout/runner issue"
          fi
          echo "Please check the logs above for details."
          exit 1
        fi