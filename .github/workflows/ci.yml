name: CI Pipeline

# Concurrency control - cancel previous runs when new commits are pushed
# This saves CI minutes by ensuring only the latest commit is tested
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - '.vscode/**'
      - '.scripts/README.md'
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - '.vscode/**'
      - '.scripts/README.md'

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            runner: [self-hosted, Linux]
          - os: macos
            runner: [self-hosted, macOS]
          - os: windows
            runner: [self-hosted, Windows]
    timeout-minutes: 10
    steps:
      - name: Runner info
        run: |
          echo "RUNNER_NAME=${{ env.RUNNER_NAME }}"
          echo "RUNNER_OS=${{ env.RUNNER_OS }}"
          echo "RUNNER_LABELS=${{ env.RUNNER_LABELS }}"
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set Up Environment (bash)
        if: matrix.os != 'windows'
        run: ./.scripts/install.sh --ci
      - name: Set Up Environment (PowerShell)
        if: matrix.os == 'windows'
        shell: pwsh
        run: ./.scripts/powershell/install.ps1 --ci
      - name: Build for ESP32 (bash)
        if: matrix.os != 'windows'
        run: ./.scripts/build.sh --ci
      - name: Build for ESP32 (PowerShell)
        if: matrix.os == 'windows'
        shell: pwsh
        run: ./.scripts/powershell/build.ps1 --ci
      - name: Run Tests (bash)
        if: matrix.os != 'windows'
        run: ./.scripts/test.sh --ci
      - name: Run Tests (PowerShell)
        if: matrix.os == 'windows'
        shell: pwsh
        run: ./.scripts/powershell/test.ps1 --ci
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: esp32-firmware-${{ matrix.os }}
          path: .pio/build/esp32dev/
      - name: Cleanup (bash)
        if: matrix.os != 'windows' && always()
        run: ./.scripts/uninstall.sh --ci
      - name: Cleanup (PowerShell)
        if: matrix.os == 'windows' && always()
        shell: pwsh
        run: ./.scripts/powershell/uninstall.ps1 --ci